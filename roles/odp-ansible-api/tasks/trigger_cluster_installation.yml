---
# - name: Trigger installation
#   pause: prompt='Please confirm you want to trigger the installation for the cluster {{ cluster_name }}! Press return to continue. Press Ctrl+c and then "a" to abort'
  # when: not silent

- name: Trigger installation
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/state=INIT"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"RequestInfo": {"context" :"Installing Services API"}, "Body": {"ServiceInfo": {"state": "INSTALLED"}}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: check_install_all_services

- name: Wait for all services to be installed
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/requests/{{ check_install_all_services.json.Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    status_code: 200,201,202
    validate_certs: no
    return_content: yes
  register: cluster_check_task_install_services
  until: (cluster_check_task_install_services.json.Requests.request_status == 'COMPLETED' and (cluster_check_task_install_services.json.Requests.completed_task_count|int > 0) or
          cluster_check_task_install_services.json.Requests.request_status == 'FAILED' or
          cluster_check_task_install_services.json.Requests.request_status == 'TIMEDOUT' or
          cluster_check_task_install_services.json.Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait and check_install_all_services is defined and check_install_all_services.json is defined and check_install_all_services and (check_install_all_services.json) != ""
