---
- set_fact:
    loop_services: >
      {{ loop_services|d([])
        + [ {} | combine(item[0]) | combine(item[1].components) ]
      }}
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version

- set_fact:
    loop_services_packages: >
      {{ loop_services_packages|d([])
        + [ {'name': item[0].name, 'packages': item[1].packages} ]
      }}
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version and item.1.packages is defined

- name: Define cluster services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"ServiceInfo":{"service_name":"{{ item.name|upper }}","desired_repository_version_id": 1}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: cluster_definition
  no_log: False
  with_items:
    - "{{ loop_services }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.name in cluster_services
  failed_when: cluster_definition.status not in [409, 200, 201, 202]

- set_fact:
    configurations_to_load: "{{ configurations_to_load | default([]) + item.1.conf }}"
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version and item.1.conf != ""

- name: Creates directory
  file:
    path: /tmp/conf/
    state: directory
- name: Copy configuration before injection on remote host
  template:
    src: "{{ item }}.json.j2"
    dest: "/tmp/conf/{{ item }}.json"
  with_items:
    - "{{ configurations_to_load }}"

# ######### Ansible BUG (or bad behaviour) replacing the string "admin" by "*****". Need to replace asterisks before injecting #########
- name: Replace asterisks
  shell: sed -i "s/[\x2a]\{8\}/admin/g" /tmp/conf/{{ item }}.json
  with_items:
    - "ranger-env"
    - "ranger-solr-configuration"
  when: cluster_services.RANGER is defined

- name: Replace asterisks
  shell: sed -i "s/[\x2a]\{8\}/admin/g" /tmp/conf/{{ item }}.json
  with_items:
    - "nifi-registry-authorizers-env"
  when: cluster_services.NIFI_REGISTRY is defined
######################################################################################################################################

- name: Get list of configurations
  find:
    paths: /tmp/conf
    recurse: yes
  register: listconftoload

- name: Fetch modified confiugration locally
  fetch:
    src: "{{ item.path }}"
    dest: "{{ role_path }}/files/"
    flat: yes
  with_items:
    - "{{ listconftoload.files }}"

- name: Load configuration for differents services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: "{{ lookup('file', '{{ item }}.json') }}"
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  with_items:
    - "{{ configurations_to_load}}"

- include_tasks: register_ranger_plugins.yml
  vars:
    in_services : "{{ item }}"
  with_items: "{{ cluster_services.RANGER.PLUGIN }}"
  when: cluster_services.RANGER is defined

- set_fact:
    loop_components_ha: >
      {{ loop_components_ha|d([])
        + [ {} | combine(item[0]) | combine(item[1].components) ]
      }}
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version

- name: Register HA components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: register_components_ha
  with_subelements:
    - "{{ loop_components_ha }}"
    - ha
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.name in cluster_services and cluster_services[item.0.name].HA is defined and all[item.1] is defined and cluster_services[item.0.name].HA and item.1 != ""
  failed_when: register_components_ha.status not in [409, 200, 201, 202]

- set_fact:
    loop_components_noha: >
      {{ loop_components_noha|d([])
        + [ {} | combine(item[0]) | combine(item[1].components) ]
      }}
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version

- name: Register components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: register_components_noha
  with_subelements:
    - "{{ loop_components_noha }}"
    - noha
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.name in cluster_services and cluster_services[item.0.name] is defined and all[item.1] is defined and cluster_services[item.0.name].HA is not defined and item.1 != ""
  failed_when: register_components_noha.status not in [409, 200, 201, 202]

- set_fact:
    loop_components_clients: >
      {{ loop_components_clients|d([])
        + [ {} | combine(item[0]) | combine(item[1].components) ]
      }}
  with_subelements:
    - "{{ services }}"
    - stacks
  when: item.0.name in cluster_services and item.1.version is defined and item.1.version == ambari_stack_version

- name: Register clients components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: register_components_clients
  with_subelements:
    - "{{ loop_components_clients }}"
    - client
  loop_control:
    label: "{{ item.1 }}"
  when: item.0.name in cluster_services and cluster_services[item.0.name] is defined and all[item.1] is defined and item.1 != ""
  failed_when: register_components_clients.status not in [409, 200, 201, 202]
  ignore_errors: True

- name: Register hosts to ambari
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/hosts/{{ item }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: ''
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: register_node
  with_items:
    - "{{ cluster_hosts }}"
  loop_control:
    label: "{{ item }}"
  failed_when: register_node.status not in [409, 200, 201, 202]

- name: Register hosts to cluster
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/hosts"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '[{"Hosts":{"host_name":"{{ item }}"}}]'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: register_hosts
  with_items:
    - "{{ cluster_hosts }}"
  loop_control:
    label: "{{ item }}"
  failed_when: register_hosts.status not in [409, 200, 201, 202]

- name: Load rack Awareness
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/hosts/{{in_item.1}}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"Hosts": { "rack_info" : "{{in_item.0.name}}"{% raw %}}{% endraw %}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: rack_awareness
  with_subelements:
    - "{{ rack_awareness }}"
    - hosts
  loop_control:
    label: "{{ in_item.1 }}"
    loop_var: in_item
  when: rack_awareness is defined

- name: Load Config groups
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/config_groups"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: "{{ lookup('template','templates/config_group.json.j2')}}"
    body_format: json
    validate_certs: no
    status_code: 200,201,202
    return_content: yes
  register: create_cluster
  no_log: False
  ignore_errors: True
  with_items:
    - "{{ config_groups }}"
  when: config_groups is defined

- include_tasks: register_components.yml
  vars:
    hosts: "{{ item }}"
  with_items: "{{ cluster_hosts }}"
