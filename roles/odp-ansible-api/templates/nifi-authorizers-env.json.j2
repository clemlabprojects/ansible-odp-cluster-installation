{
	"Clusters": {
		"desired_configs": {
			"type": "nifi-authorizers-env",
			"tag": "{{ range(00000000, 99999999) | random }}",
			"properties": { {% raw %}
        "content" : "\n        <!--\n        Licensed to the Apache Software Foundation (ASF) under one or more\n        contributor license agreements.  See the NOTICE file distributed with\n        this work for additional information regarding copyright ownership.\n        The ASF licenses this file to You under the Apache License, Version 2.0\n        (the \"License\"); you may not use this file except in compliance with\n        the License.  You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS,\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        See the License for the specific language governing permissions and\n        limitations under the License.\n        -->\n        <!--\n        This file lists the authority providers to use when running securely. In order\n        to use a specific provider it must be configured here and it's identifier\n        must be specified in the nifi.properties file.\n        -->\n        <authorizers>\n        \n        <!--\n        The FileAuthorizer is NiFi\"s provided authorizer and has the following properties:\n        - Authorizations File - The file where the FileAuthorizer will store policies.\n        - Users File - The file where the FileAuthorizer will store users and groups.\n        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and\n            given the ability to create additional users, groups, and policies. The value of this property could be\n            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there\n            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized\n            Users File can not be specified.\n            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,\n            so the value should be the unmapped identity.\n        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically\n            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can\n            not be specified, and this property will only be used when there are no other users, groups, and policies defined.\n        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node\n            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.\n            The name of each property must be unique, for example for a three node cluster:\n            \"Node Identity A\", \"Node Identity B\", \"Node Identity C\" or \"Node Identity 1\", \"Node Identity 2\", \"Node Identity 3\"\n            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,\n            so the values should be the unmapped identities (i.e. full DN from a certificate).        \n        -->\n        <authorizer>\n        <identifier>{{nifi_authorizer}}</identifier>\n        {% if has_ranger_admin and enable_ranger_nifi %}\n        <class>org.apache.nifi.ranger.authorization.RangerNiFiAuthorizer</class>\n        <property name=\"Ranger Audit Config Path\">{{nifi_config_dir}}/ranger-nifi-audit.xml</property>\n        <property name=\"Ranger Security Config Path\">{{nifi_config_dir}}/ranger-nifi-security.xml</property>\n        <property name=\"Ranger Service Type\">nifi</property>\n        <property name=\"Ranger Application Id\">nifi</property>\n        <property name=\"Ranger Admin Identity\">{{ranger_admin_identity}}</property>\n        {% if security_enabled %}\n        <property name=\"Ranger Kerberos Enabled\">true</property>\n        {% else %}\n        <property name=\"Ranger Kerberos Enabled\">false</property>\n        {% endif %}\n        {% else %}\n        <class>org.apache.nifi.authorization.FileAuthorizer</class>\n        <property name=\"Authorizations File\">{{nifi_flow_config_dir}}/authorizations.xml</property>\n        <property name=\"Users File\">{{nifi_flow_config_dir}}/users.xml</property>\n        <property name=\"Initial Admin Identity\">{{nifi_initial_admin_id}}</property>\n        <property name=\"Legacy Authorized Users File\"></property>\n        {% endif %}\n\n        {{nifi_ssl_config_content}}\n\n        </authorizer>\n        </authorizers>"
      } {% endraw %}
    }
  }
}
